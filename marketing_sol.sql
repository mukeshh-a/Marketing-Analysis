-- 1. How many transactions were completed during each marketing campaign?

select campaign_name, count(transaction_id) as total_transactions
from transactions t 
join marketing_campaigns mc on t.product_id = mc.product_id
where t.purchase_date between mc.start_date and mc.end_date
group by campaign_name
order by total_transactions;


-- 2. Which product had the highest sales quantity?

select top 1 sc.product_name as product_name, sum(quantity) as sales_quantity
from transactions t 
join sustainable_clothing sc on t.product_id = sc.product_id
group by product_name
order by sales_quantity desc;


-- 3. What is the total revenue generated from each marketing campaign?

select mc.campaign_name as campaign_name, sum(t.quantity * sc.price) as total_revenue 
from transactions t  
join sustainable_clothing sc on t.product_id = sc.product_id
join marketing_campaigns mc on t.product_id = mc.product_id and mc.product_id = t.product_id
group by mc.campaign_name
order by total_revenue;


-- 4. What is the top-selling product category based on the total revenue generated?

select top 1 sc.category as category, sum(t.quantity * sc.price) as total_revenue 
from transactions t  
join sustainable_clothing sc on t.product_id = sc.product_id
group by sc.category
order by total_revenue desc;


-- 5. Which products had a higher quantity sold compared to the average quantity sold?

select sc.product_name, sum(t.quantity) as quantity_sold
from transactions t 
join sustainable_clothing sc on t.product_id = sc.product_id
group by sc.product_name
having sum(t.quantity) > avg(t.quantity)
order by quantity_sold desc;


-- 6. What is the average revenue generated per day during the marketing campaigns?

select mc.campaign_name as campaign_name, 
       sum(t.quantity * sc.price) / (datediff(day, mc.start_date, mc.end_date) + 1) as average_revenue_per_day
from marketing_campaigns mc
join transactions t on mc.product_id = t.product_id
join sustainable_clothing sc on t.product_id = sc.product_id
group by mc.campaign_name, mc.start_date, mc.end_date;


-- 7. What is the percentage contribution of each product to the total revenue?

select sc.product_name as product_name, 
       (sum(t.quantity * sc.price) / sum(sum(t.quantity * sc.price)) over ()) * 100 as revenue_percentage
from transactions t
join sustainable_clothing sc on t.product_id = sc.product_id
group by sc.product_name
order by revenue_percentage desc;


-- 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns

select transaction_type, avg(average_quantity) as average_quantity
from (select 
         case when mc.campaign_id is not null then 'marketing campaigns' else 'outside marketing campaigns' 
		 end as transaction_type,
         t.quantity as average_quantity
      from transactions t
      left join marketing_campaigns mc on t.product_id = mc.product_id) subquery
group by transaction_type;


-- 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns

select transaction_type, sum(revenue) as total_revenue
from (select 
         case when mc.campaign_id is not null then 'marketing campaigns' else 'outside marketing campaigns' 
		 end as transaction_type,
         t.quantity * sc.price as revenue
      from transactions t
      left join marketing_campaigns mc on t.product_id = mc.product_id
      join sustainable_clothing sc on t.product_id = sc.product_id
) subquery
group by transaction_type;




--10. Rank the products by their average daily quantity sold

with avg_daily_quantity as (
    select
        sc.product_name as product_name,
        avg(t.quantity * 1.0 / datediff(day, mc.start_date, mc.end_date)) as avg_daily_quantity_sold
    from sustainable_clothing sc
    join transactions t on t.product_id = sc.product_id
    join marketing_campaigns mc on mc.product_id = sc.product_id
    group by sc.product_name)
select
    product_name,
    avg_daily_quantity_sold,
    rank() over (order by avg_daily_quantity_sold desc) as ranking
from avg_daily_quantity
order by ranking;

